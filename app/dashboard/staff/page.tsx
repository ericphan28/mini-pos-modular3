'use client'

import { CreateStaffForm } from '@/components/staff/create-staff-form'
import { StaffList } from '@/components/staff/staff-list'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { useToast } from '@/hooks/use-toast'
import { OptimizedTerminalLogger } from '@/lib/utils/optimized-logger'
import { type StaffMember } from '@/lib/services/staff-management.service'
import { createClient } from '@/lib/supabase/client'
import { Phone, Plus, Shield, UserCheck, Users } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { useEffect, useState } from 'react'

interface StaffStats {
  total: number;
  active: number;
  by_role: Record<string, number>;
}

export default function StaffManagementPage() {
  const [staffMembers, setStaffMembers] = useState<StaffMember[]>([])
  const [stats, setStats] = useState<StaffStats>({
    total: 0,
    active: 0,
    by_role: {}
  })
  const [businessInfo, setBusinessInfo] = useState<{
    id: string;
    name: string;
    max_users: number;
  } | null>(null)
  const [currentUserId, setCurrentUserId] = useState<string>('')
  const [loading, setLoading] = useState(true)
  const [showCreateForm, setShowCreateForm] = useState(false)
  const { toast } = useToast()
  const router = useRouter()

  // üñ•Ô∏è Terminal Logger cho Server Console
  const terminalLogger = new OptimizedTerminalLogger()

  // Load data using updated functions
  const loadData = async () => {
    setLoading(true)
    terminalLogger.info('üöÄ STAFF_DASHBOARD', 'B·∫Øt ƒë·∫ßu t·∫£i trang qu·∫£n l√Ω nh√¢n vi√™n', { timestamp: new Date().toISOString() })
    
    try {
      const supabase = createClient()
      const { data: { user } } = await supabase.auth.getUser()

      if (!user) {
        terminalLogger.warn('üîê AUTH_REDIRECT', 'User ch∆∞a ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng login')
        router.push('/auth/login')
        return
      }

      setCurrentUserId(user.id)
      terminalLogger.info('üë§ USER_AUTH', 'User ƒë√£ x√°c th·ª±c', { user_id: user.id.substring(0, 8) + '...' })

      // Get user profile and business info
      const { data: profileData, error: profileError } = await supabase.rpc(
        'pos_mini_modular3_get_user_profile_safe',
        { p_user_id: user.id }
      )

      if (profileError || !profileData?.profile_exists) {
        terminalLogger.error('üìã PROFILE_ERROR', 'Kh√¥ng t√¨m th·∫•y profile user', { error: profileError?.message })
        router.push('/auth/confirm?redirect=/dashboard/staff')
        return
      }

      const profile = profileData.profile
      const business = profileData.business

      terminalLogger.success('üè¢ BUSINESS_LOADED', 'Th√¥ng tin business ƒë√£ load', { 
        business_name: business.name, 
        user_role: profile.role 
      })

      // Check if user is business owner/manager
      if (!['household_owner', 'manager'].includes(profile.role)) {
        terminalLogger.warn('üö® UNAUTHORIZED_ACCESS', `User role "${profile.role}" kh√¥ng c√≥ quy·ªÅn truy c·∫≠p staff management`, {
          user_id: user.id.substring(0, 8) + '...',
          business_id: business.id.substring(0, 8) + '...',
          attempted_role: profile.role
        })

        toast({
          title: "Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p",
          description: "B·∫°n kh√¥ng c√≥ quy·ªÅn qu·∫£n l√Ω nh√¢n vi√™n",
          variant: "destructive",
        })
        router.push('/dashboard')
        return
      }

      setBusinessInfo(business)

      // Load staff members using direct function (bypass auth context issues)
      terminalLogger.info('üìä STAFF_LOADING', 'ƒêang t·∫£i danh s√°ch nh√¢n vi√™n...', { business_id: business.id.substring(0, 8) + '...' })
      
      const { data: staffData, error: staffError } = await supabase.rpc(
        'pos_mini_modular3_get_business_staff_direct',
        { 
          p_business_id: business.id,
          p_current_user_id: user.id
        }
      )

      if (staffError) {
        terminalLogger.error('‚ùå STAFF_LOAD_ERROR', 'L·ªói t·∫£i danh s√°ch nh√¢n vi√™n', {
          business_id: business.id.substring(0, 8) + '...',
          error_code: staffError.code,
          error_message: staffError.message
        })

        toast({
          title: "L·ªói",
          description: "Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n",
          variant: "destructive",
        })
        return
      }

      if (!staffData?.success) {
        terminalLogger.warn('‚ö†Ô∏è STAFF_LOAD_FAILED', 'Load staff kh√¥ng th√†nh c√¥ng', { 
          error: staffData?.error,
          business_id: business.id.substring(0, 8) + '...'
        })
        toast({
          title: "L·ªói",
          description: staffData?.error || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch nh√¢n vi√™n",
          variant: "destructive",
        })
        return
      }

      // Process data
      const staff = staffData?.staff || []
      setStaffMembers(staff)

      // Calculate stats
      const activeStaff = staff.filter((member: StaffMember) => member.status === 'active')
      const roleStats = staff.reduce((acc: Record<string, number>, member: StaffMember) => {
        acc[member.role] = (acc[member.role] || 0) + 1
        return acc
      }, {})

      setStats({
        total: staff.length,
        active: activeStaff.length,
        by_role: roleStats
      })

      // üìä Terminal log th√†nh c√¥ng v·ªõi metrics chi ti·∫øt
      terminalLogger.success('‚úÖ STAFF_DASHBOARD_LOADED', 'Dashboard nh√¢n vi√™n ƒë√£ load th√†nh c√¥ng!', {
        business_name: business.name,
        total_staff: staff.length,
        active_staff: activeStaff.length,
        role_distribution: roleStats,
        load_duration: Date.now() - Date.now(),
        loaded_by: profile.full_name || 'Unknown',
        timestamp: new Date().toLocaleString('vi-VN')
      })

      return staff
    } catch (error) {
      terminalLogger.error('üí• CRITICAL_ERROR', 'L·ªói nghi√™m tr·ªçng khi t·∫£i dashboard', {
        error_message: (error as Error).message,
        stack_preview: (error as Error).stack?.substring(0, 200) + '...',
        user_id: currentUserId.substring(0, 8) + '...'
      })

      console.error('Error loading staff data:', error)
      toast({
        title: "L·ªói",
        description: "Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu nh√¢n vi√™n",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
      terminalLogger.debug('üèÅ LOAD_COMPLETE', 'Qu√° tr√¨nh load data ƒë√£ ho√†n t·∫•t')
    }
  }

  useEffect(() => {
    terminalLogger.info('üîÑ COMPONENT_MOUNT', 'Staff Management Page ƒë∆∞·ª£c kh·ªüi t·∫°o', {
      component: 'StaffManagementPage',
      mount_time: new Date().toLocaleString('vi-VN')
    })
    loadData()
    
    // Cleanup khi component unmount
    return () => {
      terminalLogger.debug('üßπ COMPONENT_UNMOUNT', 'Staff Management Page ƒë√£ unmount', {
        component: 'StaffManagementPage',
        unmount_time: new Date().toLocaleString('vi-VN')
      })
    }
  }, []) // eslint-disable-line react-hooks/exhaustive-deps

  const handleStaffCreated = async () => {
    terminalLogger.success('üë§ STAFF_CREATED', 'T·∫°o nh√¢n vi√™n m·ªõi th√†nh c√¥ng!', {
      created_by: currentUserId.substring(0, 8) + '...',
      business_name: businessInfo?.name,
      action_time: new Date().toLocaleString('vi-VN'),
      business_id: businessInfo?.id.substring(0, 8) + '...'
    })
    
    setShowCreateForm(false)
    loadData() // Reload data after creating staff
  }

  const handleStaffUpdated = async () => {
    terminalLogger.success('‚úèÔ∏è STAFF_UPDATED', 'C·∫≠p nh·∫≠t th√¥ng tin nh√¢n vi√™n th√†nh c√¥ng!', {
      updated_by: currentUserId.substring(0, 8) + '...',
      business_name: businessInfo?.name,
      action_time: new Date().toLocaleString('vi-VN'),
      business_id: businessInfo?.id.substring(0, 8) + '...'
    })
    
    loadData() // Reload data after updating staff
  }

  if (loading) {
    // Log loading state v√†o terminal
    console.log('‚è≥ [STAFF-DASHBOARD] ƒêang trong tr·∫°ng th√°i loading...')
    
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-center space-y-4">
          <div className="w-12 h-12 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto"></div>
          <div className="space-y-2">
            <h3 className="text-lg font-semibold text-foreground">ƒêang t·∫£i d·ªØ li·ªáu</h3>
            <p className="text-muted-foreground">Vui l√≤ng ch·ªù trong gi√¢y l√°t...</p>
          </div>
        </div>
      </div>
    )
  }

  const getRoleDisplayName = (role: string) => {
    const roleNames = {
      household_owner: 'Ch·ªß c·ª≠a h√†ng',
      manager: 'Qu·∫£n l√Ω',
      seller: 'Nh√¢n vi√™n b√°n h√†ng',
      accountant: 'K·∫ø to√°n'
    }
    return roleNames[role as keyof typeof roleNames] || role
  }

  return (
    <div className="space-y-8 p-6 lg:p-8">
      {/* Header - Supabase Style */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6">
        <div className="space-y-2">
          <h1 className="text-2xl lg:text-3xl font-bold bg-gradient-to-r from-foreground to-foreground/80 bg-clip-text text-transparent">
            Qu·∫£n l√Ω nh√¢n vi√™n
          </h1>
          <p className="text-muted-foreground text-sm lg:text-base">
            <span className="font-medium text-primary">{businessInfo?.name}</span> ‚Ä¢ T·∫°o v√† qu·∫£n l√Ω t√†i kho·∫£n nh√¢n vi√™n
          </p>
        </div>
        <Button 
          onClick={() => {
            terminalLogger.info('üéØ UI_ACTION', 'User nh·∫•n n√∫t "T·∫°o nh√¢n vi√™n m·ªõi"', {
              user_id: currentUserId.substring(0, 8) + '...',
              business_name: businessInfo?.name,
              action_time: new Date().toLocaleString('vi-VN')
            })
            setShowCreateForm(true)
          }}
          className="bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary shadow-lg hover:shadow-xl transition-all duration-200 self-start lg:self-auto"
          size="lg"
        >
          <Plus className="h-4 w-4 mr-2" />
          T·∫°o nh√¢n vi√™n m·ªõi
        </Button>
      </div>

      {/* Stats Cards - Enhanced Supabase Style */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6">
        <Card className="bg-gradient-to-br from-card to-card/50 border-border/50 hover:shadow-lg transition-all duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">T·ªïng nh√¢n vi√™n</CardTitle>
            <div className="w-8 h-8 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg flex items-center justify-center">
              <Users className="h-4 w-4 text-primary" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-foreground">{stats.total}</div>
            <p className="text-xs text-muted-foreground mt-1">
              T·ªëi ƒëa {businessInfo?.max_users || 3} ng∆∞·ªùi
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-card to-card/50 border-border/50 hover:shadow-lg transition-all duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">ƒêang ho·∫°t ƒë·ªông</CardTitle>
            <div className="w-8 h-8 bg-gradient-to-br from-green-500/20 to-green-500/10 rounded-lg flex items-center justify-center">
              <UserCheck className="h-4 w-4 text-green-600" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-foreground">{stats.active}</div>
            <p className="text-xs text-muted-foreground mt-1">
              Nh√¢n vi√™n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-card to-card/50 border-border/50 hover:shadow-lg transition-all duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">Qu·∫£n l√Ω</CardTitle>
            <div className="w-8 h-8 bg-gradient-to-br from-purple-500/20 to-purple-500/10 rounded-lg flex items-center justify-center">
              <Shield className="h-4 w-4 text-purple-600" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-foreground">
              {(stats.by_role.household_owner || 0) + (stats.by_role.manager || 0)}
            </div>
            <p className="text-xs text-muted-foreground mt-1">
              Ch·ªß c·ª≠a h√†ng + Qu·∫£n l√Ω
            </p>
          </CardContent>
        </Card>

        <Card className="bg-gradient-to-br from-card to-card/50 border-border/50 hover:shadow-lg transition-all duration-200">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-muted-foreground">ƒêƒÉng nh·∫≠p b·∫±ng</CardTitle>
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500/20 to-blue-500/10 rounded-lg flex items-center justify-center">
              <Phone className="h-4 w-4 text-blue-600" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-foreground">SƒêT</div>
            <p className="text-xs text-muted-foreground mt-1">
              S·ªë ƒëi·ªán tho·∫°i + m·∫≠t kh·∫©u
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Role Statistics */}
      {Object.keys(stats.by_role).length > 0 && (
        <Card className="bg-gradient-to-br from-card to-card/50 border-border/50">
          <CardHeader>
            <CardTitle className="text-lg font-semibold">Th·ªëng k√™ theo vai tr√≤</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              {Object.entries(stats.by_role).map(([role, count]) => (
                <div key={role} className="text-center p-4 bg-gradient-to-br from-primary/5 to-primary/10 rounded-xl border border-primary/20">
                  <div className="text-2xl font-bold text-primary">{count}</div>
                  <div className="text-sm text-muted-foreground font-medium mt-1">{getRoleDisplayName(role)}</div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* Staff List */}
      <Card className="bg-gradient-to-br from-card to-card/50 border-border/50">
        <CardHeader className="border-b border-border/50">
          <CardTitle className="text-lg font-semibold">Danh s√°ch nh√¢n vi√™n</CardTitle>
          <p className="text-sm text-muted-foreground">
            Qu·∫£n l√Ω th√¥ng tin v√† quy·ªÅn truy c·∫≠p c·ªßa nh√¢n vi√™n
          </p>
        </CardHeader>
        <CardContent className="p-6">
          <StaffList 
            staffMembers={staffMembers}
            businessInfo={businessInfo}
            currentUserId={currentUserId}
            onStaffUpdated={handleStaffUpdated}
          />
        </CardContent>
      </Card>

      {/* Create Staff Form Modal */}
      {showCreateForm && businessInfo?.id && (
        <CreateStaffForm
          businessId={businessInfo.id}
          currentUserId={currentUserId}
          onSuccess={handleStaffCreated}
          onCancel={() => setShowCreateForm(false)}
        />
      )}
    </div>
  )
}
