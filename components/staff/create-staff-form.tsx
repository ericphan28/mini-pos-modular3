'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { useToast } from '@/hooks/use-toast'
import { createClient } from '@/lib/supabase/client'
import { Briefcase, Eye, EyeOff, Key, Phone, User, X } from 'lucide-react'
import { useState } from 'react'

interface CreateStaffFormProps {
  businessId: string
  currentUserId: string
  onSuccess: () => void
  onCancel: () => void
}

export function CreateStaffForm({ businessId, currentUserId, onSuccess, onCancel }: CreateStaffFormProps) {
  const [formData, setFormData] = useState({
    full_name: '',
    phone: '',
    password: '',
    role: 'seller',
    employee_id: '',
    notes: ''
  })
  const [loading, setLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const { toast } = useToast()

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)

    try {
      const supabase = createClient()
      
      // Validate form data
      if (!formData.full_name.trim()) {
        toast({
          title: "L·ªói",
          description: "Vui l√≤ng nh·∫≠p h·ªç t√™n nh√¢n vi√™n",
          variant: "destructive",
        })
        return
      }

      if (!formData.phone.trim()) {
        toast({
          title: "L·ªói", 
          description: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i",
          variant: "destructive",
        })
        return
      }

      if (formData.password.length < 6) {
        toast({
          title: "L·ªói",
          description: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±",
          variant: "destructive",
        })
        return
      }

      // Create staff member using direct function
      const { data, error } = await supabase.rpc(
        'pos_mini_modular3_create_staff_member_direct',
        {
          p_business_id: businessId,
          p_current_user_id: currentUserId,
          p_full_name: formData.full_name.trim(),
          p_phone: formData.phone.trim(),
          p_password: formData.password,
          p_role: formData.role,
          p_employee_id: formData.employee_id.trim() || null,
          p_notes: formData.notes.trim() || null
        }
      )

      if (error) {
        console.error('Create staff error:', error)
        toast({
          title: "L·ªói",
          description: "Kh√¥ng th·ªÉ t·∫°o nh√¢n vi√™n. Vui l√≤ng th·ª≠ l·∫°i.",
          variant: "destructive",
        })
        return
      }

      if (!data?.success) {
        toast({
          title: "L·ªói",
          description: data?.error || "Kh√¥ng th·ªÉ t·∫°o nh√¢n vi√™n",
          variant: "destructive",
        })
        return
      }

      // Show success message with login credentials
      toast({
        title: "T·∫°o nh√¢n vi√™n th√†nh c√¥ng!",
        description: `${formData.full_name} c√≥ th·ªÉ ƒëƒÉng nh·∫≠p b·∫±ng s·ªë ƒëi·ªán tho·∫°i ${data.phone}`,
      })

      // Show password for manager to share
      alert(`üéâ Nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!

üì± S·ªë ƒëi·ªán tho·∫°i: ${data.phone}
üîê M·∫≠t kh·∫©u: ${formData.password}

‚ö†Ô∏è Vui l√≤ng chia s·∫ª th√¥ng tin ƒëƒÉng nh·∫≠p n√†y cho nh√¢n vi√™n.
H·ªç c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b·∫±ng s·ªë ƒëi·ªán tho·∫°i v√† m·∫≠t kh·∫©u tr√™n.`)

      onSuccess()

    } catch (error) {
      console.error('Error creating staff:', error)
      toast({
        title: "L·ªói",
        description: "C√≥ l·ªói x·∫£y ra khi t·∫°o nh√¢n vi√™n",
        variant: "destructive",
      })
    } finally {
      setLoading(false)
    }
  }

  const generatePassword = () => {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
    let password = ''
    for (let i = 0; i < 8; i++) {
      password += chars.charAt(Math.floor(Math.random() * chars.length))
    }
    setFormData(prev => ({ ...prev, password }))
  }

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <Card className="w-full max-w-lg max-h-[90vh] overflow-y-auto bg-gradient-to-br from-card to-card/50 border-border/50 shadow-2xl">
        <CardHeader className="relative border-b border-border/50">
          <Button
            variant="ghost"
            size="sm"
            onClick={onCancel}
            className="absolute right-4 top-4 h-8 w-8 p-0"
            disabled={loading}
          >
            <X className="h-4 w-4" />
          </Button>
          <CardTitle className="flex items-center text-xl">
            <div className="w-8 h-8 bg-gradient-to-br from-primary to-primary/80 rounded-lg flex items-center justify-center mr-3">
              <User className="h-4 w-4 text-primary-foreground" />
            </div>
            T·∫°o nh√¢n vi√™n m·ªõi
          </CardTitle>
          <p className="text-sm text-muted-foreground">
            T·∫°o t√†i kho·∫£n ƒëƒÉng nh·∫≠p b·∫±ng s·ªë ƒëi·ªán tho·∫°i cho nh√¢n vi√™n
          </p>
        </CardHeader>
        <CardContent className="p-6">
          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Full Name */}
            <div className="space-y-2">
              <Label htmlFor="full_name" className="text-sm font-medium">
                H·ªç v√† t√™n <span className="text-red-500">*</span>
              </Label>
              <Input
                id="full_name"
                type="text"
                value={formData.full_name}
                onChange={(e) => setFormData(prev => ({ ...prev, full_name: e.target.value }))}
                placeholder="Nguy·ªÖn VƒÉn A"
                className="bg-background/50 border-border/50 focus:bg-background"
                required
              />
            </div>

            {/* Phone */}
            <div className="space-y-2">
              <Label htmlFor="phone" className="text-sm font-medium">
                S·ªë ƒëi·ªán tho·∫°i <span className="text-red-500">*</span>
              </Label>
              <div className="relative">
                <Phone className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  id="phone"
                  type="tel"
                  value={formData.phone}
                  onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}
                  placeholder="0901234567"
                  className="pl-10 bg-background/50 border-border/50 focus:bg-background"
                  required
                />
              </div>
              <p className="text-xs text-muted-foreground">
                Nh√¢n vi√™n s·∫Ω d√πng s·ªë ƒëi·ªán tho·∫°i n√†y ƒë·ªÉ ƒëƒÉng nh·∫≠p
              </p>
            </div>

            {/* Password */}
            <div className="space-y-2">
              <Label htmlFor="password" className="text-sm font-medium">
                M·∫≠t kh·∫©u <span className="text-red-500">*</span>
              </Label>
              <div className="relative">
                <Key className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <Input
                  id="password"
                  type={showPassword ? "text" : "password"}
                  value={formData.password}
                  onChange={(e) => setFormData(prev => ({ ...prev, password: e.target.value }))}
                  placeholder="Nh·∫≠p m·∫≠t kh·∫©u"
                  className="pl-10 pr-12 bg-background/50 border-border/50 focus:bg-background"
                  required
                  minLength={6}
                />
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-2 top-2 h-8 w-8 p-0"
                >
                  {showPassword ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                </Button>
              </div>
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={generatePassword}
                className="text-xs h-8"
              >
                T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
              </Button>
            </div>

            {/* Role */}
            <div className="space-y-2">
              <Label htmlFor="role" className="text-sm font-medium">Vai tr√≤</Label>
              <div className="relative">
                <Briefcase className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                <select
                  id="role"
                  value={formData.role}
                  onChange={(e) => setFormData(prev => ({ ...prev, role: e.target.value }))}
                  className="w-full pl-10 pr-4 py-2 bg-background/50 border border-border/50 rounded-md focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
                >
                  <option value="seller">Nh√¢n vi√™n b√°n h√†ng</option>
                  <option value="manager">Qu·∫£n l√Ω</option>
                  <option value="accountant">K·∫ø to√°n</option>
                </select>
              </div>
            </div>

            {/* Employee ID (Optional) */}
            <div className="space-y-2">
              <Label htmlFor="employee_id" className="text-sm font-medium">M√£ nh√¢n vi√™n (t√πy ch·ªçn)</Label>
              <Input
                id="employee_id"
                type="text"
                value={formData.employee_id}
                onChange={(e) => setFormData(prev => ({ ...prev, employee_id: e.target.value }))}
                placeholder="NV001"
                className="bg-background/50 border-border/50 focus:bg-background"
              />
            </div>

            {/* Notes (Optional) */}
            <div className="space-y-2">
              <Label htmlFor="notes" className="text-sm font-medium">Ghi ch√∫ (t√πy ch·ªçn)</Label>
              <textarea
                id="notes"
                value={formData.notes}
                onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
                placeholder="Ghi ch√∫ v·ªÅ nh√¢n vi√™n..."
                className="w-full px-3 py-2 bg-background/50 border border-border/50 rounded-md focus:ring-2 focus:ring-primary focus:border-transparent transition-colors resize-none"
                rows={3}
              />
            </div>

            {/* Action Buttons */}
            <div className="flex gap-3 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={onCancel}
                className="flex-1"
                disabled={loading}
              >
                H·ªßy
              </Button>
              <Button
                type="submit"
                disabled={loading}
                className="flex-1 bg-gradient-to-r from-primary to-primary/90 hover:from-primary/90 hover:to-primary shadow-lg"
              >
                {loading ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2"></div>
                    ƒêang t·∫°o...
                  </>
                ) : (
                  <>
                    <User className="h-4 w-4 mr-2" />
                    T·∫°o nh√¢n vi√™n
                  </>
                )}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </div>
  )
}