#!/usr/bin/env node

/**
 * Quick validation script cho h·ªá th·ªëng t·ªëi ∆∞u h√≥a
 * Ki·ªÉm tra t·∫•t c·∫£ components, utilities ƒë√£ t√≠ch h·ª£p ƒë√∫ng ch∆∞a
 */

const path = require('path');
const fs = require('fs');

const GREEN = '\x1b[32m';
const RED = '\x1b[31m';
const YELLOW = '\x1b[33m';
const BLUE = '\x1b[34m';
const RESET = '\x1b[0m';

function log(color, message) {
  console.log(`${color}${message}${RESET}`);
}

function checkFileExists(filePath, description) {
  const fullPath = path.join(__dirname, filePath);
  const exists = fs.existsSync(fullPath);
  
  if (exists) {
    log(GREEN, `‚úÖ ${description}: ${filePath}`);
    return true;
  } else {
    log(RED, `‚ùå MISSING: ${description}: ${filePath}`);
    return false;
  }
}

function checkFileContains(filePath, searchString, description) {
  const fullPath = path.join(__dirname, filePath);
  
  if (!fs.existsSync(fullPath)) {
    log(RED, `‚ùå File not found: ${filePath}`);
    return false;
  }
  
  const content = fs.readFileSync(fullPath, 'utf8');
  const contains = content.includes(searchString);
  
  if (contains) {
    log(GREEN, `‚úÖ ${description}`);
    return true;
  } else {
    log(YELLOW, `‚ö†Ô∏è ${description} - Not found: "${searchString}"`);
    return false;
  }
}

function main() {
  log(BLUE, 'üîç KI·ªÇM TRA H·ªÜ TH·ªêNG T·ªêI ∆ØU H√ìA');
  log(BLUE, '='.repeat(50));
  
  let allGood = true;
  
  // 1. Ki·ªÉm tra Logger System
  log(BLUE, '\nüìã 1. LOGGER SYSTEM');
  allGood &= checkFileExists('lib/logger/core/types.ts', 'Logger Types');
  allGood &= checkFileExists('lib/logger/core/constants.ts', 'Logger Constants');
  allGood &= checkFileExists('lib/logger/core/logger.service.ts', 'Logger Service');
  allGood &= checkFileExists('lib/logger/transports/console.transport.ts', 'Console Transport');
  allGood &= checkFileExists('lib/logger/categories/auth.logger.ts', 'Auth Logger');
  allGood &= checkFileExists('lib/logger/categories/business.logger.ts', 'Business Logger');
  allGood &= checkFileExists('lib/logger/index.ts', 'Logger Index');
  
  // 2. Ki·ªÉm tra Session Cache
  log(BLUE, '\nüóÑÔ∏è 2. SESSION CACHE SYSTEM');
  allGood &= checkFileExists('lib/utils/session-cache.ts', 'Session Cache Manager');
  allGood &= checkFileContains('lib/utils/session-cache.ts', 'class SessionCacheManager', 'SessionCacheManager class exists');
  allGood &= checkFileContains('lib/utils/session-cache.ts', 'cacheSession', 'cacheSession method exists');
  allGood &= checkFileContains('lib/utils/session-cache.ts', 'getCachedSession', 'getCachedSession method exists');
  
  // 3. Ki·ªÉm tra Optimized Logger
  log(BLUE, '\n‚ö° 3. OPTIMIZED TERMINAL LOGGER');
  allGood &= checkFileExists('lib/utils/optimized-logger.ts', 'Optimized Logger');
  allGood &= checkFileContains('lib/utils/optimized-logger.ts', 'class OptimizedTerminalLogger', 'OptimizedTerminalLogger class exists');
  allGood &= checkFileContains('lib/utils/optimized-logger.ts', 'batchSize', 'Batch logging functionality');
  allGood &= checkFileContains('lib/utils/optimized-logger.ts', 'truncateData', 'Data truncation functionality');
  
  // 4. Ki·ªÉm tra API Endpoints
  log(BLUE, '\nüîå 4. API ENDPOINTS');
  allGood &= checkFileExists('app/api/terminal-log-batch/route.ts', 'Batch Logging API');
  allGood &= checkFileContains('app/api/terminal-log-batch/route.ts', 'export async function POST', 'POST endpoint exists');
  
  // 5. Ki·ªÉm tra Login Form Integration
  log(BLUE, '\nüîê 5. LOGIN FORM INTEGRATION');
  allGood &= checkFileExists('components/login-form.tsx', 'Login Form');
  allGood &= checkFileContains('components/login-form.tsx', 'optimizedLogger', 'Uses optimized logger');
  allGood &= checkFileContains('components/login-form.tsx', 'SessionCacheManager', 'Uses session cache');
  allGood &= checkFileContains('components/login-form.tsx', 'authLogger.loginAttempt', 'Uses auth logger');
  allGood &= checkFileContains('components/login-form.tsx', 'cacheSession', 'Caches session on login');
  
  // 6. Ki·ªÉm tra Dashboard Integration
  log(BLUE, '\nüìä 6. DASHBOARD INTEGRATION');
  allGood &= checkFileExists('app/dashboard/layout.tsx', 'Dashboard Layout');
  allGood &= checkFileContains('app/dashboard/layout.tsx', 'optimizedLogger', 'Uses optimized logger');
  allGood &= checkFileContains('app/dashboard/layout.tsx', 'SessionCacheManager', 'Uses session cache');
  allGood &= checkFileContains('app/dashboard/layout.tsx', 'getCachedSession', 'Checks cache first');
  
  // 7. Ki·ªÉm tra Test Pages
  log(BLUE, '\nüß™ 7. TEST INFRASTRUCTURE');
  allGood &= checkFileExists('app/test-session-cache/page.tsx', 'Session Cache Test Page');
  allGood &= checkFileExists('app/test-logger/page.tsx', 'Logger Test Page');
  
  // 8. Ki·ªÉm tra Documentation
  log(BLUE, '\nüìö 8. DOCUMENTATION');
  allGood &= checkFileExists('OPTIMIZATION_COMPLETE.md', 'Optimization Documentation');
  allGood &= checkFileExists('docs/LOGGER_SYSTEM_GUIDE.md', 'Logger System Guide');
  
  // 9. Ki·ªÉm tra Business Service Integration
  log(BLUE, '\nüíº 9. BUSINESS SERVICE');
  allGood &= checkFileExists('lib/services/business.service.ts', 'Business Service');
  allGood &= checkFileContains('lib/services/business.service.ts', 'businessLogger', 'Uses business logger');
  
  // Summary
  log(BLUE, '\n' + '='.repeat(50));
  if (allGood) {
    log(GREEN, 'üéâ T·∫§T C·∫¢ COMPONENTS ƒê√É ƒê∆Ø·ª¢C T√çCH H·ª¢P TH√ÄNH C√îNG!');
    log(GREEN, '‚úÖ H·ªá th·ªëng t·ªëi ∆∞u h√≥a ho√†n t·∫•t v√† s·∫µn s√†ng s·ª≠ d·ª•ng');
    log(BLUE, '\nüìã C√°c t√≠nh nƒÉng c√≥ s·∫µn:');
    log(GREEN, '  ‚Ä¢ Professional Logger System v·ªõi multi-tenant support');
    log(GREEN, '  ‚Ä¢ Session Cache ƒë·ªÉ gi·∫£m 90% RPC calls');
    log(GREEN, '  ‚Ä¢ Batch Terminal Logging gi·∫£m 90% HTTP requests');
    log(GREEN, '  ‚Ä¢ Optimized Login Flow v·ªõi error handling chuy√™n nghi·ªáp');
    log(GREEN, '  ‚Ä¢ Cache-first Dashboard loading');
    log(GREEN, '  ‚Ä¢ Test interfaces cho validation');
    log(BLUE, '\nüöÄ S·∫µn s√†ng deploy production!');
  } else {
    log(RED, '‚ùå M·ªòT S·ªê COMPONENTS CH∆ØA ƒê∆Ø·ª¢C T√çCH H·ª¢P ƒê√öNG');
    log(YELLOW, '‚ö†Ô∏è Vui l√≤ng ki·ªÉm tra l·∫°i c√°c file b·ªã thi·∫øu ·ªü tr√™n');
  }
  
  process.exit(allGood ? 0 : 1);
}

if (require.main === module) {
  main();
}
